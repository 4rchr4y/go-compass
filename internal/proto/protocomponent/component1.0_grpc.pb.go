// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: protocomponent/component1.0.proto

package protocomponent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Component_Heartbeat_FullMethodName      = "/protocomponent.Component/Heartbeat"
	Component_Configure_FullMethodName      = "/protocomponent.Component/Configure"
	Component_DescribeSchema_FullMethodName = "/protocomponent.Component/DescribeSchema"
	Component_Stop_FullMethodName           = "/protocomponent.Component/Stop"
)

// ComponentClient is the client API for Component service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentClient interface {
	Heartbeat(ctx context.Context, in *Heartbeat_Request, opts ...grpc.CallOption) (*Heartbeat_Response, error)
	Configure(ctx context.Context, in *Configure_Request, opts ...grpc.CallOption) (*Configure_Response, error)
	DescribeSchema(ctx context.Context, in *DescribeSchema_Request, opts ...grpc.CallOption) (*DescribeSchema_Response, error)
	Stop(ctx context.Context, in *Stop_Request, opts ...grpc.CallOption) (*Stop_Response, error)
}

type componentClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentClient(cc grpc.ClientConnInterface) ComponentClient {
	return &componentClient{cc}
}

func (c *componentClient) Heartbeat(ctx context.Context, in *Heartbeat_Request, opts ...grpc.CallOption) (*Heartbeat_Response, error) {
	out := new(Heartbeat_Response)
	err := c.cc.Invoke(ctx, Component_Heartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentClient) Configure(ctx context.Context, in *Configure_Request, opts ...grpc.CallOption) (*Configure_Response, error) {
	out := new(Configure_Response)
	err := c.cc.Invoke(ctx, Component_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentClient) DescribeSchema(ctx context.Context, in *DescribeSchema_Request, opts ...grpc.CallOption) (*DescribeSchema_Response, error) {
	out := new(DescribeSchema_Response)
	err := c.cc.Invoke(ctx, Component_DescribeSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentClient) Stop(ctx context.Context, in *Stop_Request, opts ...grpc.CallOption) (*Stop_Response, error) {
	out := new(Stop_Response)
	err := c.cc.Invoke(ctx, Component_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentServer is the server API for Component service.
// All implementations must embed UnimplementedComponentServer
// for forward compatibility
type ComponentServer interface {
	Heartbeat(context.Context, *Heartbeat_Request) (*Heartbeat_Response, error)
	Configure(context.Context, *Configure_Request) (*Configure_Response, error)
	DescribeSchema(context.Context, *DescribeSchema_Request) (*DescribeSchema_Response, error)
	Stop(context.Context, *Stop_Request) (*Stop_Response, error)
	mustEmbedUnimplementedComponentServer()
}

// UnimplementedComponentServer must be embedded to have forward compatible implementations.
type UnimplementedComponentServer struct {
}

func (UnimplementedComponentServer) Heartbeat(context.Context, *Heartbeat_Request) (*Heartbeat_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedComponentServer) Configure(context.Context, *Configure_Request) (*Configure_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedComponentServer) DescribeSchema(context.Context, *DescribeSchema_Request) (*DescribeSchema_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSchema not implemented")
}
func (UnimplementedComponentServer) Stop(context.Context, *Stop_Request) (*Stop_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedComponentServer) mustEmbedUnimplementedComponentServer() {}

// UnsafeComponentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentServer will
// result in compilation errors.
type UnsafeComponentServer interface {
	mustEmbedUnimplementedComponentServer()
}

func RegisterComponentServer(s grpc.ServiceRegistrar, srv ComponentServer) {
	s.RegisterService(&Component_ServiceDesc, srv)
}

func _Component_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Component_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServer).Heartbeat(ctx, req.(*Heartbeat_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Component_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configure_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Component_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServer).Configure(ctx, req.(*Configure_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Component_DescribeSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSchema_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServer).DescribeSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Component_DescribeSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServer).DescribeSchema(ctx, req.(*DescribeSchema_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Component_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stop_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Component_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentServer).Stop(ctx, req.(*Stop_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Component_ServiceDesc is the grpc.ServiceDesc for Component service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Component_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocomponent.Component",
	HandlerType: (*ComponentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Component_Heartbeat_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Component_Configure_Handler,
		},
		{
			MethodName: "DescribeSchema",
			Handler:    _Component_DescribeSchema_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Component_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocomponent/component1.0.proto",
}
