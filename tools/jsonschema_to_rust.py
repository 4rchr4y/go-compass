import argparse
import json
from pathlib import Path


def validate_json(schema: str) -> dict:
    """
    Validate that the schema string is valid JSON.
    Returns the parsed JSON object if valid.
    Raises ValueError if the JSON is invalid.
    """
    try:
        return json.loads(schema)
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON: {e}")


def generate_rust_constant(schema_name: str, schema: dict) -> str:
    """
    Generate Rust code for a constant containing the JSON schema.
    """
    return f"""\
// This file is auto-generated by `jsonschema_to_rust` script
// It should not be modified manually

use once_cell::sync::Lazy;
use serde_json::{{json, Value}};
        
pub static SCHEMA_{schema_name.upper()}: Lazy<Value> = Lazy::new(|| json!(
{json.dumps(schema, indent=4)}
));
"""


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Generate Rust Constants for JSON Schema ")
    parser.add_argument("--schema", type=argparse.FileType('r'), required=True, help="Path to the JSON schema file")
    parser.add_argument("--output", type=argparse.FileType('w+'), required=True, help="Path to the output Rust file")
    args = parser.parse_args()

    try:
        schema_file = args.schema
        schema_content = schema_file.read()
        schema_file.close()
        parsed_schema = validate_json(schema_content)

        # Generate Rust code
        schema_name = Path(schema_file.name).stem
        rust_code = generate_rust_constant(schema_name, parsed_schema)

        # Write the output
        output_file = args.output
        output_file.write(rust_code)
        output_file.close()
        print(f"Rust constant generated successfully in {output_file.name}")
    except Exception as e:
        print(f"Error: {e}")


