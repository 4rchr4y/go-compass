input CreateProjectInput {
  path: String!
}

input CreateSessionInput {
  projectId: NanoId!
}

type FileInfo {
  path: String!
  size: Int!
  modTime: Int!
  isDir: Boolean!
}

type MutationRoot {
  createProject(input: CreateProjectInput!): Project!
  deleteProjectById(id: NanoId!): Thing!
  getProjectListByIds(ids: [NanoId!]!): [Project!]!
  createSession(input: CreateSessionInput!): Session!
  getRecentSessionList(startTime: Int! = 1711820264, limit: Int! = 10): [Session!]!
}

scalar NanoId

type NotificationPreference {
  sound: Boolean!
}

type Preference {
  visual: VisualPreference!
  notification: NotificationPreference!
}

type Project {
  id: NanoId!
  source: String!
  createdAt: Int!
}

type QueryRoot {
  getPreference: Preference!
}

type Report {
  source: String!
}

type RootSubscription {
  explorerReadDir(path: String!): [FileInfo!]!
  metricFeed: Report!
}

type Session {
  id: NanoId!
  projectId: NanoId!
  createdAt: Int!
}

type Thing {
  id: String!
}

type VisualPreference {
  theme: String!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: RootSubscription
}
