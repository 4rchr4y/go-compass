type FileInfo {
  path: String!
  size: Int!
  modTime: Int!
  isDir: Boolean!
}

scalar Mnid

type MutationRoot {
  createProject(input: NewProjectInput!): Project!
  openProject: Project!
  deleteProjectById(id: String!): Thing!
}

input NewProjectInput {
  path: String!
}

type NotificationPreference {
  sound: Boolean!
}

type Preference {
  visual: VisualPreference!
  notification: NotificationPreference!
}

type Project {
  id: Mnid!
  source: String!
  lastUsedAt: Int!
  createdAt: Int!
}

type QueryRoot {
  getPreference: Preference!
  selectPortalResentList(startTime: Int! = 1711728513, limit: Int! = 10): [RecentProject!]!
}

type RecentProject {
  id: Mnid!
  source: String!
  lastUsedAt: Int!
}

type Report {
  source: String!
}

type RootSubscription {
  explorerReadDir(path: String!): [FileInfo!]!
  metricFeed: Report!
}

type Thing {
  id: String!
}

type VisualPreference {
  theme: String!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: RootSubscription
}
